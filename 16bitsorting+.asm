data segment
MSG1 DB 0Dh,0Ah ,'Enter the Array (press Enter after each number):$'
MSG2 DB 0Dh,0Ah,'Sorted Array: $'
MSG3 DB 0Dh,0Ah,'Before Sorting:$'
MSG4 DB 0Dh,0Ah,'Enter the length of Array:$'
ARRAY DW 50 DUP(0)
LEN DB 1 DUP(?)
SPACE DB ' $'

INPUT_BUFFER DB 10, ?, 10 DUP(0)
NEWLINE DB 10, 13, '$'   
data ends

code segment
ASSUME CS:code, DS:data

START:
MOV AX,data
MOV DS,AX

LEA DX,MSG4
MOV AH,09H
INT 21H

CALL READ_NUMBER
MOV [LEN],AL

MOV CL,[LEN]
MOV CH,0
MOV SI,0
LEA DX,MSG1
MOV AH,09H
INT 21H

READ_LOOP:
CALL READ_NUMBER
MOV ARRAY[SI], AX
ADD SI, 2
LOOP READ_LOOP


MOV CL,[LEN]
MOV CH,0
MOV SI,0
LEA DX,MSG3
MOV AH,09H
INT 21H

PRINT_INITIAL:
MOV AX, ARRAY[SI]
CALL PRINT_NUMBER

LEA DX,SPACE
MOV AH,09H
INT 21H

ADD SI, 2
LOOP PRINT_INITIAL


MOV CL,[LEN]
DEC CL

OUTER_LOOP:
MOV CH,CL
MOV SI,0
INNER_LOOP:
MOV AX, ARRAY[SI]
CMP AX, ARRAY[SI+2]
JBE SKIP_SWAP

XCHG AX, ARRAY[SI+2]
MOV ARRAY[SI], AX

SKIP_SWAP:
ADD SI, 2
DEC CH
JNZ INNER_LOOP
DEC CL
JNZ OUTER_LOOP

LEA DX,MSG2
MOV AH,09H
INT 21H

MOV CL,[LEN]
MOV CH,0
MOV SI,0

PRINT_LOOP:
MOV AX, ARRAY[SI]
CALL PRINT_NUMBER

LEA DX,SPACE
MOV AH, 09h
INT 21h

ADD SI, 2
LOOP PRINT_LOOP

MOV AH, 4CH
INT 21H

READ_NUMBER PROC
    PUSH CX
    PUSH BX
    PUSH DX
    PUSH SI

    LEA DX, INPUT_BUFFER
    MOV AH, 0AH   
    INT 21H

    LEA DX, NEWLINE
    MOV AH, 09H
    INT 21H
    
    LEA SI, INPUT_BUFFER + 2  
    MOV CL, [INPUT_BUFFER + 1] 
    SUB CH,CH                 
    
    MOV AX, 0                 
    MOV BX, 10                

    JCXZ DONE_CONVERT_READ     
    
CONVERT_LOOP_READ:
    MOV DX, 0                 
    MOV DL, [SI]              
    SUB DL, 30H               
    
    PUSH DX                   

    MUL BX                    
    
    POP DX                    
    ADD AX, DX                
    
    INC SI                    
    DEC CX                    
    JNZ CONVERT_LOOP_READ     
    
DONE_CONVERT_READ:
    POP SI
    POP DX
    POP BX
    POP CX
    RET
READ_NUMBER ENDP

PRINT_NUMBER PROC
    PUSH AX
    PUSH BX
    PUSH CX
    PUSH DX
    
    MOV CX, 0
    MOV BX, 10
    
    CMP AX, 0
    JNE CONVERT_LOOP_PRINT
    
    PUSH 0
    INC CX
    JMP PRINT_LOOP_NUM
    
CONVERT_LOOP_PRINT:
    MOV DX, 0
    DIV BX
    PUSH DX
    INC CX
    CMP AX, 0
    JNE CONVERT_LOOP_PRINT
    
PRINT_LOOP_NUM:
    POP DX
    ADD DL, 30H
    MOV AH, 02H
    INT 21H
    LOOP PRINT_LOOP_NUM
    
    POP DX
    POP CX
    POP BX
    POP AX
    RET
PRINT_NUMBER ENDP

CODE ENDS
END START
