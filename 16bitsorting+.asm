data segment
MSG1 DB 0Dh,0Ah ,'Enter the Array (press Enter after each number):$'
MSG2 DB 0Dh,0Ah,'Sorted Array: $'
MSG3 DB 0Dh,0Ah,'Before Sorting:$'
MSG4 DB 0Dh,0Ah,'Enter the length of Array (1-9):$'
ARRAY DW 50 DUP(0)
LEN DB 1 DUP(?)
SPACE DB ' $'
data ends

code segment
ASSUME CS:code, DS:data

START:
MOV AX,data
MOV DS,AX

LEA DX,MSG4
MOV AH,09H
INT 21H
MOV AH,01H
INT 21H
SUB AL,'0'
MOV [LEN],AL

MOV CL,[LEN]
MOV CH,0
MOV SI,0
LEA DX,MSG1
MOV AH,09H
INT 21H

READ_LOOP:
CALL READ_16BIT_NUM
MOV ARRAY[SI], AX
ADD SI, 2
LOOP READ_LOOP


MOV CL,[LEN]
MOV CH,0
MOV SI,0
LEA DX,MSG3
MOV AH,09H
INT 21H

PRINT_INITIAL:
MOV AX, ARRAY[SI]
CALL PRINT_16BIT_NUM

LEA DX,SPACE
MOV AH,09H
INT 21H

ADD SI, 2
LOOP PRINT_INITIAL


MOV CL,[LEN]
DEC CL

OUTER_LOOP:
MOV CH,CL
MOV SI,0
INNER_LOOP:
MOV AX, ARRAY[SI]
CMP AX, ARRAY[SI+2]
JBE SKIP_SWAP

XCHG AX, ARRAY[SI+2]
MOV ARRAY[SI], AX

SKIP_SWAP:
ADD SI, 2
DEC CH
JNZ INNER_LOOP
DEC CL
JNZ OUTER_LOOP

LEA DX,MSG2
MOV AH,09H
INT 21H

MOV CL,[LEN]
MOV CH,0
MOV SI,0

PRINT_LOOP:
MOV AX, ARRAY[SI]
CALL PRINT_16BIT_NUM

LEA DX,SPACE
MOV AH, 09h
INT 21h

ADD SI, 2
LOOP PRINT_LOOP

MOV AH, 4CH
INT 21H

READ_16BIT_NUM PROC
PUSH BX
PUSH CX
PUSH DX

XOR AX, AX

READ_CHAR:
PUSH AX
MOV AH, 01H
INT 21H
MOV BL, AL
POP AX

CMP BL, 0Dh
JE READ_DONE

SUB BL, '0'
XOR CX, CX
MOV CL, BL

PUSH CX

MOV BX, 10
MUL BX

POP CX
ADD AX, CX

JMP READ_CHAR

READ_DONE:
POP DX
POP CX
POP BX
RET
READ_16BIT_NUM ENDP

PRINT_16BIT_NUM PROC
PUSH AX
PUSH BX
PUSH CX
PUSH DX

CMP AX, 0
JNE START_DIV

MOV DL, '0'
MOV AH, 02H
INT 21H
JMP PRINT_EXIT

START_DIV:
XOR CX, CX
MOV BX, 10

DIV_LOOP:
XOR DX, DX
DIV BX
PUSH DX
INC CX
OR AX, AX
JNZ DIV_LOOP

PRINT_STACK:
POP DX
ADD DL, '0'
MOV AH, 02H
INT 21H
LOOP PRINT_STACK

PRINT_EXIT:
POP DX
POP CX
POP BX
POP AX
RET
PRINT_16BIT_NUM ENDP

CODE ENDS
END START